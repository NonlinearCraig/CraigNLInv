#lang rosette
(require rosette/lib/synthax)
(define-symbolic _a_0_ real?)
(define-symbolic _a_1_ real?)
(define-symbolic _a_2_ real?)
(define-symbolic _a_3_ real?)
(define-symbolic _a_4_ real?)
(define-symbolic _a_5_ real?)
(define-symbolic n_0 real?)
(define-symbolic su_0 real?)
(define-symbolic t_0 real?)
(define-symbolic a_0 real?)
(define start (current-inexact-milliseconds))

(define sol
  (synthesize
   
   #:forall (list su_0 n_0 a_0 t_0)
   #:guarantee (and (implies (and (>= n_0 0)) (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_5_ n_0)) 0)))
(implies (and (>= n_0 0)) (and (>= 0.0 0)))
(implies (and (>= n_0 0)) (and (>= 0.0 0)))
(implies (and (>= n_0 0)) (and (>= 0.0 0)))
(implies (and (>= n_0 0)) (and (>= 0.0 0)))
(implies (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_3_ a_0) (* _a_4_ a_0**2) (* _a_5_ n_0) (* _a_1_ a_0 n_0)) 0) (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 su_0 (* -1 a_0**2) (* -2.00000000000000 a_0)) 0) (>= (+ 1.00000000000000 a_0**2 (* -1 su_0) (* 2.00000000000000 a_0)) 0) (>= (+ su_0 (* -1 n_0)) 0)) (and (>= (+ n_0 (* -1 a_0**2)) 0)))
(implies (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_3_ a_0) (* _a_4_ a_0**2) (* _a_5_ n_0) (* _a_1_ a_0 n_0)) 0) (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 su_0 (* -1 a_0**2) (* -2.00000000000000 a_0)) 0) (>= (+ 1.00000000000000 a_0**2 (* -1 su_0) (* 2.00000000000000 a_0)) 0) (>= (+ n_0 (* -1 su_0)) 0)) (and (>= (+ _a_0_ (* 1.00000000000000 _a_3_) (* 1.00000000000000 _a_4_) (* _a_2_ n_0**2) (* _a_4_ a_0**2) (* a_0 (+ _a_3_ (* 2.00000000000000 _a_4_))) (* n_0 (+ _a_5_ (* 1.00000000000000 _a_1_))) (* _a_1_ a_0 n_0)) 0)))
(implies (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_3_ a_0) (* _a_4_ a_0**2) (* _a_5_ n_0) (* _a_1_ a_0 n_0)) 0) (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 su_0 (* -1 a_0**2) (* -2.00000000000000 a_0)) 0) (>= (+ 1.00000000000000 a_0**2 (* -1 su_0) (* 2.00000000000000 a_0)) 0) (>= (+ n_0 (* -1 su_0)) 0)) (and (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0)))
(implies (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_3_ a_0) (* _a_4_ a_0**2) (* _a_5_ n_0) (* _a_1_ a_0 n_0)) 0) (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 su_0 (* -1 a_0**2) (* -2.00000000000000 a_0)) 0) (>= (+ 1.00000000000000 a_0**2 (* -1 su_0) (* 2.00000000000000 a_0)) 0) (>= (+ n_0 (* -1 su_0)) 0)) (and (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0)))
(implies (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_3_ a_0) (* _a_4_ a_0**2) (* _a_5_ n_0) (* _a_1_ a_0 n_0)) 0) (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 su_0 (* -1 a_0**2) (* -2.00000000000000 a_0)) 0) (>= (+ 1.00000000000000 a_0**2 (* -1 su_0) (* 2.00000000000000 a_0)) 0) (>= (+ n_0 (* -1 su_0)) 0)) (and (>= (+ su_0 t_0 (* -1 a_0**2) (* -4.00000000000000 a_0)) 0)))
(implies (and (>= (+ _a_0_ (* _a_2_ n_0**2) (* _a_3_ a_0) (* _a_4_ a_0**2) (* _a_5_ n_0) (* _a_1_ a_0 n_0)) 0) (>= (+ 1.00000000000000 (* -1 t_0) (* 2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 t_0 (* -2.00000000000000 a_0)) 0) (>= (+ -1.00000000000000 su_0 (* -1 a_0**2) (* -2.00000000000000 a_0)) 0) (>= (+ 1.00000000000000 a_0**2 (* -1 su_0) (* 2.00000000000000 a_0)) 0) (>= (+ n_0 (* -1 su_0)) 0)) (and (>= (+ a_0**2 (* -1 su_0) (* -1 t_0) (* 4.00000000000000 a_0)) 0))))
   )
  )
(define end (current-inexact-milliseconds))
(print (- end start))
